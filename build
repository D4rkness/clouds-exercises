#!/bin/bash

function buildSolution(){
    cat ../template/default.properties > solution.md.1
    cp solution.md solution.md.2
    sed -i "1s/.*/$var/" solution.md.2
    cat solution.md.2 >> solution.md.1
    pandoc --latex-engine=xelatex  solution.md.1 -t latex -o solution.pdf --template ../template/eisvogel.latex
    rm solution.md.1 solution.md.2
}

function buildExercise(){
    cat README.md > exercise.md 
    echo "\newpage" >> exercise.md
    echo "" >> exercise.md

    sed -i "1s/.*/$var/" exercise.md
    mv exercise.md exercise.md.1
    cat ../template/default.properties >> exercise.md 
    cat exercise.md.1 >> exercise.md 
    rm exercise.md.1

    for file in $EXERCISE_FILES ; do
        cat $file >> exercise.md 
        echo "\newpage" >> exercise.md
        echo "" >> exercise.md
    done

    pandoc --latex-engine=xelatex exercise.md -t latex -o exercise.pdf --template ../template/eisvogel.latex
    rm exercise.md
}

function buildAll(){

    exportArtifacts=$1; shift

    if [[ $exportArtifacts == "export" ]]; then
        mkdir -p artifacts
    fi

    artefactList=""

    for ex in $(ls | grep ex-); do
        (
            echo "build exercise $ex ..."
            cd $ex
            source ./build
            echo "EXTRA_ARTIFACTS: $EXTRA_ARTIFACTS"

            if [[ $exportArtifacts == "export" ]]; then
                mkdir -p ../artifacts/$ex
                cp exercise.pdf ../artifacts/$ex/
                cp solution.pdf ../artifacts/$ex/
                artefactList="$artefactList artifacts/$ex/exercise.pdf"                
                artefactList="$artefactList artifacts/$ex/solution.pdf"
                for artifact in $EXTRA_ARTIFACTS; do
                    cp $artifact ../artifacts/$ex/
                done
            fi
        )
    done

    # merge pdfs to one script file
    pdftk $artefactList cat output artifacts/fullscript.pdf

}

if [[ ${BASH_SOURCE[0]} != $0 ]]; then
  export -f buildSolution buildExercise
else
  buildAll "${@}"
  exit $?
fi